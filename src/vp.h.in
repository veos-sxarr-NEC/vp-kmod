/*
 * VP Kernel Module
 *
 * Copyright (C) 2017-2018 NEC Corporation
 * This file is part of VP Kernel Module.
 *
 * VP Kernel Module is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * VP Kernel Module is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with the VP Kernel Module; if not, see
 * <http://www.gnu.org/licenses/>.
 */

#ifndef V2P_VP_H_INCLUDE_
#define V2P_VP_H_INCLUDE_

#ifndef __KERNEL__
#include <stdint.h>
#include <sys/types.h>
#endif

#ifdef __KERNEL__
#include <linux/hashtable.h>
#endif

struct vp {
	pid_t pid;	/*!< PID which has the virtual address to translate */
	int write;	/*!< whether pages will be written to */
	int pfnmap;	/*!< 1 if vm_flags has VM_PFNMAP */
	uint64_t virt;	/*!< Virtual address to translate */
	uint64_t phys;	/*!< Physical address corresponding to
			 * virtual address of pid
			 */
};

struct vpm {
	pid_t pid;	/*!< PID which has the virtual address to translate */
	int write;	/*!< whether pages will be written to */
	int pfnmap;	/*!< 1 if vm_flags has VM_PFNMAP */
	int naddr;	/*!< number of addresses to translate & pin */
	uint64_t *virt;	/*!< Virtual address to translate */
	uint64_t *phys;	/*!< Physical address corresponding to
			 * virtual address of pid
			 */
};

struct vp_blk {
	pid_t pid;	/*!< PID which has the virtual address to translate */
	int write;	/*!< whether pages will be written to */
	uint64_t vaddr;  /*!< start virtual address value */
	uint64_t length; /*!< length of block */
	uint64_t *paddr; /*!< array with physical address of pages */
	uint32_t npages;
	uint32_t maxpages;
	int pfnmap;	/*!< 1 if vm_flags has VM_PFNMAP */
	int pgsz;	 /*!< page size */
};

/* ioctl commands */
#define VP_IOC_MAGIC	0xF6
#define VP_CMD_V2P		_IOWR(VP_IOC_MAGIC, 0, struct vp)
#define VP_CMD_V2P_PIN_DOWN	_IOWR(VP_IOC_MAGIC, 1, struct vp)
#define VP_CMD_RELEASE		_IOR(VP_IOC_MAGIC, 2, unsigned long)
#define VP_CMD_RELEASE_ALL	_IO(VP_IOC_MAGIC, 3)
#define VP_CMD_V2PM		_IOWR(VP_IOC_MAGIC, 4, struct vpm)
#define VP_CMD_V2PM_PIN_DOWN	_IOWR(VP_IOC_MAGIC, 5, struct vpm)

#define HASH_LIST_BITS 11

#define VP_MAXBULK 100

#ifdef __KERNEL__
struct page_list {
	DECLARE_HASHTABLE(head, HASH_LIST_BITS);
};
int vp_v2p(struct vp *v, int pin_down, struct page_list *hash_list_head);
int vp_v2p_from_user(struct vp __user *uptr, int pin_down,
		struct page_list *hash_list_head);
int vp_v2p_blk_from_user(struct vp_blk __user *uptr, int pin_down,
			 struct page_list *hash_list_head);
int vp_page_release(unsigned long pa, struct page_list *hash_list_head);
void vp_page_release_all(struct page_list *hash_list_head);
int vp_page_count_all(struct page_list *hash_list_head);
int vp_page_release_blk(uint64_t *pa, int npages, struct page_list *hash_list_head);
#endif /* __KERNEL__ */

#endif /*V2P_VP_H_INCLUDE_*/
